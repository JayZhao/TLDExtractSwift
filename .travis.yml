language: objective-c
os: osx
osx_image: xcode10.2

# branches:
#   only:
#     - master
#     - develop
#     - "/^v?[0-9\\.]+/"

cache:
  directories:
    - Pods
    - Carthage

env:
  global:
    - XCODE_PROJECT="TLDExtract.xcodeproj"
    - IOS_SCHEME="TLDExtract-iOS"
    - MACOS_SCHEME="TLDExtract-macOS"
    - TVOS_SCHEME="TLDExtract-tvOS"

matrix:
  include:
    # iOS Tests
    - env: SCHEME="$IOS_SCHEME" RUNTIME="iOS 12.1" DEVICE="iPhone XS Max" RUN_TESTS="YES" LINT="NO"  COVERAGE="YES" CODECOV_FLAG="ios12"
    - env: SCHEME="$IOS_SCHEME" RUNTIME="iOS 11.4" DEVICE="iPhone 8 Plus" RUN_TESTS="YES" LINT="YES" COVERAGE="NO"  CODECOV_FLAG="ios11"
    - env: SCHEME="$IOS_SCHEME" RUNTIME="iOS 10.3" DEVICE="iPhone 7"      RUN_TESTS="YES" LINT="NO"  COVERAGE="NO"  CODECOV_FLAG="ios10"
    - env: SCHEME="$IOS_SCHEME" RUNTIME="iOS 9.3"  DEVICE="iPhone 6"      RUN_TESTS="YES" LINT="NO"  COVERAGE="NO"  CODECOV_FLAG="ios9"
    # tvOS Tests
    - env: SCHEME="$TVOS_SCHEME" RUNTIME="tvOS 12.1" DEVICE="Apple TV 4K"    RUN_TESTS="YES" LINT="NO" COVERAGE="NO" CODECOV_FLAG="tvos12"
    #    - env: SCHEME="$TVOS_SCHEME" RUNTIME="tvOS 11.4" DEVICE="Apple TV 4K"    RUN_TESTS="YES" LINT="NO" COVERAGE="NO" CODECOV_FLAG="tvos11"
    #    - env: SCHEME="$TVOS_SCHEME" RUNTIME="tvOS 10.2" DEVICE="Apple TV 1080p" RUN_TESTS="YES" LINT="NO" COVERAGE="NO" CODECOV_FLAG="tvos10"
    # macOS Tests
    - env: SCHEME="$MACOS_SCHEME" RUNTIME="macOS" RUN_TESTS="YES" LINT="NO" COVERAGE="NO" CODECOV_FLAG="macos"

before_install:
  # Workaround for “Library not loaded: /usr/lib/libauto.dylib”; see:
  #   https://stackoverflow.com/questions/55389080/xcode-10-2-failed-to-run-app-on-simulator-with-ios-10
  #   https://developer.apple.com/documentation/xcode_release_notes/xcode_10_2_1_release_notes
  - if [ "RUNTIME" == "iOS 9.3" ]; then
    sudo mkdir '/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 9.3.simruntime/Contents/Resources/RuntimeRoot/usr/lib/swift';
    fi

  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    bundle install;
    gem install xcpretty -N --no-document;
    gem install cocoapods --pre --no-document;
    brew update;
    brew outdated carthage || brew upgrade carthage;
    carthage bootstrap --platform "$CARTHAGE_PLATFORM" --cache-builds --verbose;
    pod repo update;
    fi

install:
  - ./install-swiftlint.sh;

before_script:
  - if [ "$RUN_TESTS" == "YES" -a "$RUNTIME" == "macOS" ]; then
    DESTINATION="arch=x86_64";
    elif [ "$RUN_TESTS" == "YES" -a "$RUNTIME" != "macOS" ]; then
    DEVICE_ID=com.apple.CoreSimulator.SimDeviceType.$(echo $DEVICE | sed -E -e "s/[ \-]+/ /g" -e "s/[^[:alnum:]]/-/g");
    RUNTIME_ID=com.apple.CoreSimulator.SimRuntime.$(echo $RUNTIME | sed -E -e "s/[ \-]+/ /g" -e "s/[^[:alnum:]]/-/g");
    DESTINATION_ID=$(xcrun simctl create Travis $DEVICE_ID $RUNTIME_ID);
    DESTINATION="id=$DESTINATION_ID";
    xcrun simctl boot $DESTINATION_ID;
    fi

script:
  - set -o pipefail;
  - swift -version;

  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    xcodebuild -version;
    xcodebuild -showsdks;
    fi

  - if [ "$RUN_TESTS" == "YES" ]; then
    xcodebuild clean test -project "$XCODE_PROJECT" -scheme "$SCHEME" -destination "$DESTINATION" -enableCodeCoverage $COVERAGE | xcpretty -c;
    elif [ "$RUN_TESTS" == "NO" ]; then
    xcodebuild clean build -project "$XCODE_PROJECT" -scheme "$SCHEME" -destination "$DESTINATION" -configuration Release | xcpretty -c;
    fi

  - if [ "$LINT" == "YES" ]; then
    swiftlint;
    carthage build --platform "$CARTHAGE_PLATFORM" --no-skip-current --cache-builds --verbose;
    pod lib lint --verbose;
    fi

after_success:
  - if [ "$COVERAGE" == "YES" ]; then
    bash <(curl -s https://codecov.io/bash) -J 'TLDExtract' -cF "$CODECOV_FLAG";
    fi
